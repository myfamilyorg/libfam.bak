/********************************************************************************
 * MIT License
 *
 * Copyright (c) 2025 Christopher Gilliard
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *******************************************************************************/

#include <alloc.h>
#include <atomic.h>
#include <channel.h>
#include <error.h>
#include <misc.h>
#include <syscall.h>
#include <syscall_const.h>

#define MIN_TIMEOUT_AGE (1000 * 1000 * 60) /* 1 minute in micros */

typedef struct ChannelElement {
	struct ChannelElement *next;
	uint64_t micros;
} ChannelElement;

struct ChannelInner {
	uint64_t head_seq;
	uint64_t element_size;
	ChannelElement *retired;
	ChannelElement *head;
	ChannelElement *tail;
	uint32_t futex;
};

STATIC int notify(Channel *channel) {
	channel->inner->futex = 0;
	return futex(&channel->inner->futex, FUTEX_WAKE, 1, NULL, NULL, 0);
}

STATIC void free_element_list(ChannelElement *list) {
	ChannelElement *current = list;
	while (current) {
		ChannelElement *next = current->next;
		release(current);
		current = next;
	}
}

STATIC void check_retired(Channel *channel) {
	ChannelElement *retired;
	if (!channel || !channel->inner) return;

	retired = (ChannelElement *)ALOAD(&channel->inner->retired);
	if (retired && retired->micros != 0) {
		uint64_t now = micros();
		if (now >= retired->micros + MIN_TIMEOUT_AGE) {
			if (CAS(&channel->inner->retired, &retired, NULL)) {
				free_element_list(retired);
			}
		}
	}
}

void channel_destroy(Channel *channel) {
	if (channel && channel->inner) {
		ChannelElement *current = channel->inner->head;
		while (current) {
			ChannelElement *next = current->next;
			release(current);
			current = next;
		}

		current = channel->inner->retired;
		while (current) {
			ChannelElement *next = current->next;
			release(current);
			current = next;
		}
		channel->inner->retired = NULL;

		release(channel->inner);
		channel->inner = NULL;
	}
}

Channel channel(size_t element_size) {
	Channel ret = {0};

	ret.inner = alloc(sizeof(ChannelInner));
	if (ret.inner == NULL) return ret;
	ret.inner->tail = ret.inner->head = NULL;
	ret.inner->element_size = element_size;
	ret.inner->head_seq = 0;
	ret.inner->retired = NULL;

	return ret;
}

bool channel_ok(Channel *channel) {
	return channel != NULL && channel->inner != NULL;
}

int recv_now(Channel *channel, void *dst) {
	size_t size;
	ChannelElement *current_head;
	ChannelElement *next;
	ChannelElement *expected;
	uint64_t initial_seq;
	uint64_t final_seq;
	int success;
	static uint64_t recv_count = 0;
	if (++recv_count % 10 == 0) check_retired(channel);

	current_head = (ChannelElement *)ALOAD(&channel->inner->head);
	if (current_head == NULL) return -1;
	size = channel->inner->element_size;
	initial_seq = ALOAD(&channel->inner->head_seq);
	next = (ChannelElement *)ALOAD(&current_head->next);

	while (true) {
		expected = current_head;
		success = CAS(&channel->inner->head, &expected, next);
		if (success) {
			if (next == NULL) ASTORE(&channel->inner->tail, NULL);
			AADD(&channel->inner->head_seq, 1);
			final_seq = ALOAD(&channel->inner->head_seq);

			memcpy(dst,
			       (char *)current_head + sizeof(ChannelElement),
			       size);

			if (final_seq == initial_seq + 1) {
				release(current_head);
			} else {
				ChannelElement *old_retired;
				current_head->micros = micros();
				do {
					old_retired = (ChannelElement *)ALOAD(
					    &channel->inner->retired);
					current_head->next = old_retired;
				} while (!CAS(&channel->inner->retired,
					      &old_retired, current_head));
			}
			return 0;
		}
		current_head = (ChannelElement *)ALOAD(&channel->inner->head);
		initial_seq = ALOAD(&channel->inner->head_seq);
		if (current_head == NULL) {
			return -1;
		}
		next = (ChannelElement *)ALOAD(&current_head->next);
	}
}

void recv(Channel *channel, void *dst) {
	while (recv_now(channel, dst) == -1) {
		channel->inner->futex = 1;
		futex(&channel->inner->futex, FUTEX_WAIT, 1, NULL, NULL, 0);
	}
}

int send(Channel *channel, const void *source) {
	size_t size;
	size_t alloc_size;
	ChannelElement *elem;
	ChannelElement *current_tail;
	ChannelElement *last;
	ChannelElement *expected_tail;
	ChannelElement *expected_head;
	int success;
	static uint64_t send_count = 0;
	if (++send_count % 10 == 0) check_retired(channel);

	size = channel->inner->element_size;
	alloc_size = size + sizeof(ChannelElement);

	elem = alloc(alloc_size);
	if (!elem) return -1;
	elem->next = NULL;
	memcpy((char *)elem + sizeof(ChannelElement), source, size);

	current_tail = (ChannelElement *)ALOAD(&channel->inner->tail);

	if (current_tail == NULL) {
		expected_tail = NULL;
		success = CAS(&channel->inner->tail, &expected_tail, elem);
		if (success) {
			expected_head = NULL;
			success =
			    CAS(&channel->inner->head, &expected_head, elem);
			if (success) {
				AADD(&channel->inner->head_seq, 1);
			}
			return notify(channel);
		}
		current_tail = (ChannelElement *)ALOAD(&channel->inner->tail);
	}

	while (true) {
		last = current_tail;
		while (last->next != NULL)
			last = (ChannelElement *)ALOAD(&last->next);
		expected_tail = NULL;
		success = CAS(&last->next, &expected_tail, elem);
		if (success) {
			expected_tail = last;
			CAS(&channel->inner->tail, &expected_tail, elem);
			return notify(channel);
		}
		current_tail = (ChannelElement *)ALOAD(&channel->inner->tail);
	}
}
