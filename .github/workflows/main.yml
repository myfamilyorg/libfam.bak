name: CI Pipeline
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: "15 7 * * *" # Nightly build at 7:15 AM (UDT)
  workflow_dispatch:  # This enables manual triggering

jobs:
  linux_amd64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux-amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check linux version
        run: uname -a
      - name: linux all
        run: |
          make clean test CC=gcc MEMSAN=1
          make clean test CC=clang MEMSAN=1
          make clean all CC=gcc
          make clean all CC=clang
          ldd lib/libfam.so  | grep "statically linked" || { echo "not statically linked!"; exit 1; }
          UNDEFINED_COUNT=$(nm lib/libfam.so | grep " U " | grep -v "U environ" | wc -l)
          if [ "$UNDEFINED_COUNT" -ne 0 ]; then
            echo "Error: Found $UNDEFINED_COUNT undefined symbols other than environ"
            exit 1
          fi
  linux_aarch64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install QEMU and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 cloud-image-utils
      - name: Cache Debian Image
        uses: actions/cache@v4
        with:
          path: debian-11-arm64.qcow2
          key: ${{ runner.os }}-debian-image-${{ hashFiles('debian-11-arm64.qcow2') }}
      - name: Download Debian ARM64 Image
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget -O debian-11-arm64.qcow2 https://cloud.debian.org/images/cloud/bullseye/latest/debian-11-generic-arm64.qcow2
      - name: Download Kernel
        run: |
          # Download Debian 11 ARM64 kernel (5.10) from specific release
          wget -O vmlinuz-5.10-arm64 http://deb.debian.org/debian/dists/bullseye/main/installer-arm64/20210731+deb11u12/images/netboot/vmlinuz || \
          { echo "Kernel download failed"; exit 1; }
      - name: Verify EFI
        run: |
          # Verify EFI firmware
          if [ -f /usr/share/edk2/aarch64/QEMU_EFI-pflash.raw ]; then
            echo "EFI found"
          else
            echo "EFI not found"
            exit 1
          fi
      - name: Run QEMU System Emulation
        run: |
          # Create cloud-init for SSH access
          cat << 'EOF' > user-data
          #cloud-config
          users:
            - name: runner
              ssh-authorized-keys:
                - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC... # Replace with your SSH public key
              sudo: ALL=(ALL) NOPASSWD:ALL
              groups: sudo
              shell: /bin/bash
          EOF
          cloud-localds user-data.img user-data
          # Start QEMU with log
          qemu-system-aarch64 \
            -machine virt \
            -cpu cortex-a57 \
            -m 2G \
            -drive file=debian-11-arm64.qcow2,format=qcow2 \
            -drive file=user-data.img,format=raw \
            -nographic \
            -netdev user,id=net0,hostfwd=tcp::2222-:22 \
            -device virtio-net-device,netdev=net0 \
            -kernel vmlinuz-5.10-arm64 \
            -append "root=/dev/vda1 console=ttyAMA0" \
            -serial mon:stdio \
            -drive if=pflash,format=raw,file=/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw > qemu.log 2>&1 &
          # Wait for VM to boot
          for i in {1..5}; do
            if ssh -o StrictHostKeyChecking=no -p 2222 runner@localhost "uptime"; then
              break
            fi
            sleep 30
          done
          # SSH into VM
          ssh -o StrictHostKeyChecking=no -p 2222 runner@localhost << 'EOF'
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends make gcc clang
            sudo apt-get clean
            cd /work
            make clean test || { echo "Make failed"; exit 1; }
          EOF
      - name: Debug on Failure
        if: failure()
        run: |
          if [ -f output.log ]; then
            cat output.log
          else
            echo "output.log not found"
          fi
          if [ -f qemu.log ]; then
            cat qemu.log
          else
            echo "qemu.log not found"
          fi
